from pycoin.serialize import b2h, h2b
from pycoin import encoding
import rlp
from ethereum import tester, utils, abi, blocks, transactions
import requests
import json
import jsonrpc
import time
from ethereum.abi import ContractTranslator
from ethereum.utils import mk_contract_address
from bike.parsing.fastparserast import Node


global_wait_for_confirm = True
use_ether_scan = False
use_augor = False
ether_scan_api_key = '66FCG5X3HSVW23R2ZJTFJEKWMKKGJVIQXK'
local_url = "http://localhost:8545/jsonrpc"
augor_local_url = "https://eth3.augur.net/jsonrpc"

def merge_two_dicts(x, y):
    '''Given two dicts, merge them into a new dict as a shallow copy.'''
    z = x.copy()
    z.update(y)
    return z

def etherscan_call(method_name, params):
    url = "https://koven.etherscan.io/api"
    payload = {"module" : "proxy",
               "action" : method_name,
               "apikey" : ether_scan_api_key }
    payload = merge_two_dicts(payload, params[0])
    response = requests.post(url, params=payload)
    #print str(response)
    return response.json()[ 'result' ]
    
    
def json_call(method_name, params):
    if use_ether_scan:
        return etherscan_call(method_name, params)
    url = local_url
    if use_augor:
        url = augor_local_url
    headers = {'content-type': 'application/json'}
    
    # Example echo method
    payload = { "method": method_name,
                "params": params,
                "jsonrpc": "2.0",
                "id": 1,
                }
    # print str(params)
    response = requests.post(url, data=json.dumps(payload), headers=headers).json()
    print str(response)
    #print response
    return response[ 'result' ]

global_nonce = -1
def get_num_transactions(address):
    #return "12d"
    #return "6"
    #return "0x546B"
    global global_nonce
    # if( global_nonce > 0 ):
    #    global_nonce += 1
    #    return "0x" + "%x" % global_nonce
    if use_ether_scan:
        params = [{ "address" : "0x" + address, "tag" : "pending" }]
    else:
        params = [ "0x" + address, "pending" ]
    nonce = json_call("eth_getTransactionCount", params)
    # print "nonce: " + str(nonce)
    global_nonce = int(nonce, 16)
    return nonce 

def get_gas_price_in_wei():
    if use_ether_scan:
        return "0x%x" % 20000000000  # 20 gwei
    return json_call("eth_gasPrice", [])

def eval_startgas(src, dst, value, data, gas_price):
    if use_ether_scan or True:
        return "0x%x" % (4712388 / 2)  # hardcoded max gas
        
    params = { "value" : "0x" + str(value),
               "pasPrice" : gas_price }
    if len(data) > 0:
        params["data"] = "0x" + str(data)
    if len(dst) > 0:
        params["to"] = "0x" + dst
    #           "from" : "0x" + dst }
    # params = { "from" : "0x06f099a7d789f10b0c1c1f069638ba25b2bf8483",
    #           "data" : "123456789" }
    # print str(params)
    return json_call("eth_estimateGas", [params])


def make_transaction(src_priv_key, dst_address, value, data):
    src_address = b2h(utils.privtoaddr(src_priv_key))
    nonce = get_num_transactions(src_address)
    #gas_price = get_gas_price_in_wei()
    data_as_string = b2h(data)
    # print len(data_as_string)
    # if len(data) > 0:
    #    data_as_string = "0x" + data_as_string 
    #start_gas = eval_startgas(src_address, dst_address, value, data_as_string, gas_price)
    start_gas = 10**6
    nonce = int(nonce, 16)
    #gas_price = int(gas_price, 16)
    gas_price = (10**10) * 20 
    #int(gas_price, 16)/20
    #start_gas = int(start_gas, 16) + 100000
    
    #start_gas = 4612288  # // 10
    #start_gas = 38336
    #start_gas = 30048
    # start_gas = 5000000    
    
    for i in range(1):
        tx = transactions.Transaction(nonce,
                                       gas_price,
                                       start_gas,
                                       dst_address,
                                       value,
                                       data).sign(src_priv_key)
        
        
                                       
        tx_hex = b2h(rlp.encode(tx))
        print tx_hex
        tx_hash = b2h(tx.hash)

                        
        #print(tx_hex)
        # print str(tx_hash)
        if use_ether_scan:
            params = [{"hex" : "0x" + tx_hex }]
        else:
            params = ["0x" + tx_hex]
        return_value = json_call("eth_sendRawTransaction", params)                       
        if return_value == "0x0000000000000000000000000000000000000000000000000000000000000000":
            print "Transaction failed"
            return return_value
        
        nonce += 1
        print str(nonce)
    wait_for_confirmation(tx_hash)
    return return_value        

    
def get_contract_data(contract_name, ctor_args):
    bin_file = open(contract_name + ".bin", "rb")
    bin = h2b(bin_file.read())
    # print bin
    bin_file.close()
    #bin = h2b("")
    
    abi_file = open(contract_name + ".abi", "r")
    abi = abi_file.read()
    abi_file.close()
    
    translator = ContractTranslator(abi)
    ctor_call = translator.encode_constructor_arguments(ctor_args)
    print "ctor"
    print b2h(ctor_call)
    
        
    return (bin + ctor_call, abi)
    
def upload_contract(priv_key, contract_data, value):
    src_address = b2h(utils.privtoaddr(priv_key))
    nonce = get_num_transactions(src_address)
    print "nonce"
    print str(nonce)
    gas_price = get_gas_price_in_wei()
    start_gas = eval_startgas(src_address, "", value, b2h(contract_data), gas_price)    
    
    contract_hash = b2h(mk_contract_address(src_address, int(nonce, 16))) 
    print "contract hash"
    print contract_hash
    
    nonce = int(nonce, 16)
    #nonce = 21627 + 2
    # print str(nonce)
    gas_price = int(gas_price, 16) * 3 /3
    start_gas = int(start_gas, 16) + 100000
    print str(start_gas)
    start_gas = 4700000  # 4710388#3000000#4712388 # 5183626 / 2
    #start_gas = 4990000
    
    tx = transactions.contract(nonce, gas_price, start_gas, value, contract_data).sign(priv_key)
                     
    # print contract_data                  
    tx_hex = b2h(rlp.encode(tx))
    tx_hash = b2h(tx.hash)
    print(tx_hex)
    print tx_hash
    
    # print str(tx_hash)
    if use_ether_scan:
        params = [{"hex" : "0x" + tx_hex }]
    else:
        params = ["0x" + tx_hex]
            
    return_value = (json_call("eth_sendRawTransaction", params), contract_hash)
    wait_for_confirmation(tx_hash)
    return return_value        

def call_function(priv_key, value, contract_hash, contract_abi, function_name, args):
    translator = ContractTranslator(contract_abi)
    call = translator.encode_function_call(function_name, args)
    return make_transaction(priv_key, contract_hash, value, call)
    

def call_const_function(priv_key, value, contract_hash, contract_abi, function_name, args):
    src_address = b2h(utils.privtoaddr(priv_key))    
    translator = ContractTranslator(contract_abi)
    call = translator.encode_function_call(function_name, args)  
    nonce = get_num_transactions(src_address)
    gas_price = get_gas_price_in_wei()
    
    start_gas = eval_startgas(src_address, contract_hash, value, b2h(call), gas_price)    
    nonce = int(nonce, 16)
    gas_price = int(gas_price, 16)
    start_gas = int(start_gas, 16) + 100000
    start_gas = 612288 

    
    params = { "from" : "0x" + src_address,
               "to"   : "0x" + contract_hash,
               "gas"  : "0x" + "%x" % start_gas,
               "gasPrice" : "0x" + "%x" % gas_price,
               "value" : "0x" + str(value),
               "data" : "0x" + b2h(call) }
    
    return_value = json_call("eth_call", [params])
    print return_value
    return_value = h2b(return_value[2:])  # remove 0x
    return translator.decode(function_name, return_value)



def make_new_filter(contract_address, topic):
    params = { "fromBlock" : "0x1",
               "address": "0x" + contract_address,
               "topics" : [topic] }
    filter_id = json_call("eth_newFilter", [params])
    # filter_id = "0x0"
    print filter_id
    params = filter_id
    print json_call("eth_getFilterLogs", [params])

def wait_for_confirmation(tx_hash):
    
    params = None
    if use_ether_scan:
        params = { "txhash" : "0x" + tx_hash }
    else:
        params = "0x" + tx_hash
    round = 0
    while(True):
        print "waiting for confirmation round " + str(round)
        round += 1 
        result = json_call("eth_getTransactionReceipt", [params])
        # print result
        if result is None:
            if(global_wait_for_confirm):
                time.sleep(10)
                continue
            else:
                time.sleep(1)
                return                
        # print str(result["blockHash"])
        if not(result["blockHash"] is None):
            return result
        time.sleep(10)
        
        



from pycoin.serialize import b2h, h2b
from pycoin import encoding
import rlp
from ethereum import tester, utils, abi, blocks, transactions
import requests
import json
import jsonrpc
import time
from ethereum.abi import ContractTranslator
from ethereum.utils import mk_contract_address


class agt_leaf:
    def is_leaf(self):
        return True
    
    def __init__(self, value, counter_16_bytes_stream):
        self.min = counter_16_bytes_stream
        self.max = counter_16_bytes_stream
        self.value = h2b("00") * 16 + utils.sha3(value)[16:32]

    def override_min(self, new_min):
        self.min = new_min
        
    def override_max(self, new_max):
        self.max = new_max
    
    def override_value(self, new_value):
        self.value = h2b("00") * 16 + utils.sha3(new_value)[16:32]

class agt_node:
    def is_leaf(self):
        return False
    
    def __init__(self, left_node, right_node):
        self.min = left_node.min
        self.max = right_node.max
        
        self.left = left_node
        self.right = right_node
                
        left_data =  left_node.max + left_node.min + left_node.value  
        right_data = right_node.max + right_node.min + right_node.value 
        
        
        #print b2h(right_data)        
        
        self.value =  h2b("00") * 16 + utils.sha3(left_data + right_data)[16:32]
        
    def override_min(self, new_min):
        self.min = new_min
        
    def override_max(self, new_max):
        self.max = new_max         
        
    def get_branch(self, index, depth):
        if( depth == 0 ):
            raise NameError('depth should not be zero')
        
        
        countersBranch = []
        hashesBranch = []
        leaf_counter = None
        leaf_hash = None

        child_node = None
        second_child_node = None        
        go_right = (((1 << (depth-1)) & index) > 0)
        if( go_right ):
            child_node = self.right
            second_child_node = self.left
        else:
            child_node = self.left
            second_child_node = self.right
         
        if( not child_node.is_leaf() ):
            (countersBranch, hashesBranch,leaf_counter,leaf_hash) = child_node.get_branch(index,depth-1)
        else:
            if( depth != 1 ):
                raise NameError('depth should be one')
            leaf_counter = child_node.min
            leaf_hash = child_node.value
            
        countersBranch.append(second_child_node.max + second_child_node.min)
        hashesBranch.append(second_child_node.value)
        
        return (countersBranch, hashesBranch,leaf_counter,leaf_hash)
    
    def get_node(self, depth, index):
        if( depth == 0 ):
            return self
        go_right = (((1 << (depth-1)) & index) > 0)
        child = None
        if( go_right ):
            child = self.right
        else:
            child = self.left
            
        if( child.is_leaf() ):
            if( depth != 1 ):
                raise NameError('depth should be one')
            return child 
        
        return child.get_node(depth-1, index)                        
    
################################################################################

def build_agt_from_leafs( leaf_array ):
    nodes_array = leaf_array
    while(len(nodes_array) > 1 ):
        next_level = []        
        for i in range(len(nodes_array)/2):
            node = agt_node( nodes_array[2*i], nodes_array[2*i+1])  
            next_level.append(node)
        nodes_array = next_level
        
    return nodes_array[0]

################################################################################

def build_valid_agt( num_leaves ):
    nodes_array = []
    for i in range(num_leaves):
        value = utils.sha3(i)
        counter = h2b( "%032x" % i)
        leaf = agt_leaf(value, counter)
        nodes_array.append(leaf)

    return build_agt_from_leafs(nodes_array)       

################################################################################

def build_agt_with_duplications( num_leaves, duplicated_share_source_index, duplicated_share_dest_index, num_duplicates ):
    nodes_array = []
    for i in range(num_leaves):
        value = utils.sha3(i)
        counter = h2b( "%032x" % i)
        leaf = agt_leaf(value, counter)
        nodes_array.append(leaf)
        
        if( (i >= duplicated_share_dest_index) and (i < duplicated_share_dest_index + num_duplicates) ):
            nodes_array[i] = nodes_array[duplicated_share_source_index + i - duplicated_share_dest_index]
            

    return build_agt_from_leafs(nodes_array)       

################################################################################

def build_agt_with_duplication_pattern( num_leaves, start_pattern_index, duplication_frequency ):
    nodes_array = []
    for i in range(num_leaves):
        value = utils.sha3(i)
        counter = h2b( "%032x" % i)
        leaf = agt_leaf(value, counter)
        nodes_array.append(leaf)

        if( i > 0 and i >= start_pattern_index ):
            if( ((i - start_pattern_index) % duplication_frequency) == 0 ):
                nodes_array[i] = nodes_array[i-1]
            

    return build_agt_from_leafs(nodes_array)       


################################################################################

def bytestream_to_int( stream ):
    return int(b2h(stream),16)

def make_verify_agt_input( root, depth, index ):
    (counters_branch, hashes_branch,leaf_counter,leaf_hash) = root.get_branch(index,depth)
    
    rootHash = bytestream_to_int(root.value)
    rootMin = bytestream_to_int(root.min)
    rootMax = bytestream_to_int(root.max)    
    leafHash = bytestream_to_int(leaf_hash)
    leafCounter = bytestream_to_int(leaf_counter)
    branchIndex = index
    
    countersBranch = []
    for i in range(len(counters_branch)):
        countersBranch.append(bytestream_to_int(counters_branch[i]))
        
    hashesBranch = []        
    for i in range(len(hashes_branch)):
        hashesBranch.append(bytestream_to_int(hashes_branch[i]))
        
    return [rootHash,rootMin,rootMax,leafHash,leafCounter,branchIndex,countersBranch,hashesBranch] 

def make_js_input( params, varSuffixName, object_name):
    print "////////////////////////////////////////////////////////////////////////////////"
    print "// this code was generated automatically"
    print ""
    print "var rootHash" + varSuffixName + " = new BigNumber(\"" + "0x%x" % params[0] + "\");"
    print "var rootMin" + varSuffixName + " = new BigNumber(\"" + "0x%x" % params[1] + "\");"    
    print "var rootMax" + varSuffixName + " = new BigNumber(\"" + "0x%x" % params[2] + "\");"
    print "var leafHash" + varSuffixName + " = new BigNumber(\"" + "0x%x" % params[3] + "\");"    
    print "var leafCounter" + varSuffixName + " = new BigNumber(\"" + "0x%x" % params[4] + "\");"    
    print "var branchIndex" + varSuffixName + " = new BigNumber(\"" + "0x%x" % params[5] + "\");"
    print "var countersBranch" + varSuffixName + " = ["
    for counter in params[6]:
        print "\tnew BigNumber(\"" + "0x%x" % counter + "\"),"
    print "];"
    print "var hashesBranch" + varSuffixName + " = ["
    for counter in params[7]:
        print "\tnew BigNumber(\"" + "0x%x" % counter + "\"),"
    print "];"
    
    print "var " + object_name + " = new helper.VerifyAgtInput( rootHash" + varSuffixName\
    + ", rootMin" + varSuffixName\
    + ", rootMax" + varSuffixName\
    + ", leafHash" + varSuffixName + ", leafCounter" + varSuffixName\
    + ", branchIndex" + varSuffixName\
    + ", countersBranch" + varSuffixName\
    + ", hashesBranch" + varSuffixName + " );"    
          
    print "module.exports." + varSuffixName + " = function ( ) {"
    print "\treturn " + object_name + ";"
    print "}"
            
################################################################################

def make_valid_inputs():
    root = build_valid_agt(2**10)
    
    # first index
    params = make_verify_agt_input(root,10,0)    
    make_js_input(params, "ValidAgtFirstShare", "validAgtFirstShare")
    
    # last index
    params = make_verify_agt_input(root,10,1023)    
    make_js_input(params, "ValidAgtLastShare", "validAgtLastShare")
    
    # middle index
    params = make_verify_agt_input(root,10,500)    
    make_js_input(params, "ValidAgtMiddleShare", "validAgtMiddleShare")
    
def make_duplications_inputs():
    
    ### single duplication
    
    # duplication in the beginning
    root = build_agt_with_duplications( 2**10, 0, 1, 1 )
    params = make_verify_agt_input(root,10,1)
    make_js_input(params, "DuplicationSingleAgtFirstShare1", "duplicationSingleFirstShare1")    

    # duplication in the beginning and end
    root = build_agt_with_duplications( 2**10, 0, 1023, 1 )
    params = make_verify_agt_input(root,10,1023)
    make_js_input(params, "DuplicationSingleAgtFirstShare2", "duplicationSingleFirstShare2")    

    # duplication in the end
    root = build_agt_with_duplications( 2**10, 1022, 1023, 1 )
    params = make_verify_agt_input(root,10,1023)
    make_js_input(params, "DuplicationSingleAgtLastShare", "duplicationSingleLastShare")    

    # duplication in the middle
    root = build_agt_with_duplications( 2**10, 210, 607, 1 )
    params = make_verify_agt_input(root,10,607)
    make_js_input(params, "DuplicationSingleAgtMiddleShare", "duplicationSingleMiddleShare")    

    ### bulk duplication
    
    # duplication in the beginning
    root = build_agt_with_duplications( 2**10, 0, 1, 100 )
    params = make_verify_agt_input(root,10,50)
    make_js_input(params, "DuplicationBulkAgtFirstShare1", "duplicationBulkFirstShare1")    

    # duplication in the beginning and end
    root = build_agt_with_duplications( 2**10, 0, 1023-100, 100 )
    params = make_verify_agt_input(root,10,1023)
    make_js_input(params, "DuplicationBulkAgtFirstShare2", "duplicationBulkFirstShare2")    

    # duplication in the end
    root = build_agt_with_duplications( 2**10, 1023-200, 1023-100, 100 )
    params = make_verify_agt_input(root,10,1000)
    make_js_input(params, "DuplicationBulkAgtLastShare", "duplicationBulkLastShare")    

    # duplication in the middle
    root = build_agt_with_duplications( 2**10, 210, 607, 100 )
    params = make_verify_agt_input(root,10,657)
    make_js_input(params, "DuplicationBulkAgtMiddleShare", "duplicationBulkMiddleShare")    
    
    ### pattern duplication
    root = build_agt_with_duplication_pattern( 2**10, 100, 300 )
    params = make_verify_agt_input(root,10,400)    
    make_js_input(params, "DuplicationPatternAgtMiddleShare", "duplicationPatternMiddleShare")
    
def make_invalid_agt():
    # different leaf counter
    root = build_valid_agt( 2**10 ) 
    params = make_verify_agt_input(root,10,0x4A)
    params[4] += 1
    make_js_input(params, "InvalidAgtLeafCounter", "invalidAgtLeafCounter")    
    
    # different leaf value
    root = build_valid_agt( 2**10 ) 
    leaf = root.get_node(10,0x4A)
    leaf.override_value(utils.sha3("sivan"))
    params = make_verify_agt_input(root,10,0x4A)
    make_js_input(params, "InvalidAgtLeafValue", "invalidAgtLeafValue")
    
    # left.min >= left.max    
    root = build_valid_agt( 2**8 ) 
    node = root.get_node(4, 0x0A)
    node.override_min(node.max)
    params = make_verify_agt_input(root,8,0xB0)
    make_js_input(params, "InvalidAgtNodeMinGeqLeftMax", "invalidAgtNodeMinGeqLeftMax")

    # right.min >= right.max
    root = build_valid_agt( 2**8 ) 
    node = root.get_node(4, 0x0B)
    node.override_min(node.max)
    params = make_verify_agt_input(root,8,0xA0)
    make_js_input(params, "InvalidAgtNodeMinGeqRightMax", "invalidAgtNodeMinGeqRightMax")
    
    # left.min > left.max for leaf
    root = build_valid_agt( 2**8 )
    node = root.get_node(8, 0x0A)
    node.override_min(h2b( "%032x" % (int(b2h(node.max),16)+1)))
    params = make_verify_agt_input(root,8,0x0B)
    make_js_input(params, "InvalidAgtLeftLeafMinGtMax", "invalidAgtLeftLeafMinGtMax")

    # right.min > right.max for leaf
    root = build_valid_agt( 2**8 )
    node = root.get_node(8, 0x0B)
    node.override_min(h2b( "%032x" % (int(b2h(node.max),16)+1)))
    params = make_verify_agt_input(root,8,0x0A)
    make_js_input(params, "InvalidAgtRightLeafMinGtMax", "invalidAgtLeftRightMinGtMax")

    # left.max >= right.min for a node
    root = build_valid_agt( 2**8 )
    nodeLeft = root.get_node(4, 0x0A)
    nodeRight = root.get_node(4, 0x0B)
    nodeLeft.override_max(nodeRight.min)
    params = make_verify_agt_input(root,8,0xB1)
    make_js_input(params, "InvalidAgtLeftMaxGeRightMin", "invalidAgtLeftMaxGeRightMin")
    
    # invalid root.min data    
    root = build_valid_agt( 2**8 )
    params = make_verify_agt_input(root,8,0)
    params[1] += 1 
    make_js_input(params, "InvalidAgtRootMin", "invalidAgtRootMin")    
    
    # invalid root.max data    
    root = build_valid_agt( 2**8 )
    params = make_verify_agt_input(root,8,0)
    params[2] += 1 
    make_js_input(params, "InvalidAgtRootMax", "invalidAgtRootMax")    

    # invalid root.hash data    
    root = build_valid_agt( 2**8 )
    params = make_verify_agt_input(root,8,0)
    params[0] += 1 
    make_js_input(params, "InvalidAgtRootHash", "invalidAgtRootHash")    
   

################################################################################
'''
funds_in_block_reward = int(300/5)
time_in_months = 1
num_trials_per_month = 4*60*24*30
hash_power = 0.1

n = num_trials_per_month * time_in_months 
k = n - funds_in_block_reward
p = hash_power 

lamb = p * num_trials_per_month * time_in_months
x = 0.99 * lamb
# pr [ X <= x ]
print lamb
print x
sd
#odds_of_bankrupt = 
'''
   
    
################################################################################

if( True ):
    print "var BigNumber = require('bignumber.js');"
    print "const helper = require('./helpers');"
    
    
    make_valid_inputs()
    make_duplications_inputs()
    make_invalid_agt()
    
    sd    
    
    
# first index
#params = make_verify_agt_input(root,10,30)






key = h2b("4f3edf983ac636a65a842ce7c78d9aa706d3b113bce9c46f30d7d21715b23b1d")



owners = [0x6d87462cB31C1217cf1eD61B4FCC37F823c61624, 0xe034afdcc2ba0441ff215ee9ba0da3e86450108d, 0x38b6a9aedee2238f7c0540a6ff0f71ac4a6b0948] 
(contract_data_ethash, abi_ethash) = get_contract_data("./contracts/TestPool", [owners])


#(str, contract_hash_ethash) = upload_contract( key, contract_data_ethash, 0 )
#zelda


contract_hash_ethash = "e0f8cee346a702cca192a6ec807ff89b4c6bc70e"




print call_const_function(key, 0, contract_hash_ethash, abi_ethash, "verifyAgtDebugForTesting", params)
print "0x%x" % params[0]

'''
failure_cntr = 0
for i in range(256):
    params = make_verify_agt_input(root,8,i)
    ret_val = call_const_function(key, 0, contract_hash_ethash, abi_ethash, "verifyAgtDebugForTesting", params)
    if( ret_val[0] != 0 ):
        failure_cntr += 1
        print i
        sd
    print i
    
print failure_cntr
'''